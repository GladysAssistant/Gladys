const {
  DEVICE_FEATURE_CATEGORIES,
  DEVICE_FEATURE_TYPES,
  DEVICE_FEATURE_UNITS,
} = require('../../../../utils/constants');

/**
 * @description Transforms Tessie feature as Gladys feature.
 * @param {string} externalId - Gladys external ID.
 * @param {string} category - Gladys category.
 * @param {object} driveState - Drive state from Tessie.
 * @returns {object} Gladys feature or undefined.
 * @example
 * buildFeatureDrive('tessie:vehicle_vin', 'ELECTRICAL_VEHICLE_DRIVE', driveState);
 */
function buildFeatureDrive(externalId, category, driveState) {
  return [
    {
      name: 'Drive energy consumption total',
      external_id: `${externalId}:drive_energy_consumption_total`,
      selector: `${externalId}-drive-energy-consumption-total`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].DRIVE_ENERGY_CONSUMPTION_TOTAL,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 999999999,
    },
    {
      name: 'Speed',
      external_id: `${externalId}:speed`,
      selector: `${externalId}-speed`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].SPEED,
      unit: DEVICE_FEATURE_UNITS.MILE_PER_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 250,
      last_value: driveState.speed,
    },
    { // TODO: Add last drive types
      name: 'Last drive energy consumption',
      external_id: `${externalId}:last_drive_energy_consumption`,
      selector: `${externalId}-last-drive-energy-consumption`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].DRIVE_ENERGY_CONSUMPTION_TOTAL,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 1000,
    },
    {
      name: 'Last drive distance',
      external_id: `${externalId}:last_drive_distance`,
      selector: `${externalId}-last-drive-distance`,
      category: DEVICE_FEATURE_CATEGORIES.ELECTRICAL_VEHICLE_STATE,
      type: DEVICE_FEATURE_TYPES.ELECTRICAL_VEHICLE_STATE.ODOMETER,
      unit: DEVICE_FEATURE_UNITS.MILE,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 1000,
    },
    {
      name: 'Last drive average speed',
      external_id: `${externalId}:last_drive_average_speed`,
      selector: `${externalId}-last-drive-average-speed`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].SPEED,
      unit: DEVICE_FEATURE_UNITS.MILE_PER_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 250,
    },
    {
      name: 'Last drive max speed',
      external_id: `${externalId}:last_drive_max_speed`,
      selector: `${externalId}-last-drive-max-speed`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].SPEED,
      unit: DEVICE_FEATURE_UNITS.MILE_PER_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 250,
    },
    {
      name: 'Last drive average inside temperature',
      external_id: `${externalId}:last_drive_average_inside_temperature`,
      selector: `${externalId}-last-drive-average-inside-temperature`,
      category: DEVICE_FEATURE_CATEGORIES.ELECTRICAL_VEHICLE_CLIMATE,
      type: DEVICE_FEATURE_TYPES.ELECTRICAL_VEHICLE_CLIMATE.INDOOR_TEMPERATURE,
      unit: DEVICE_FEATURE_UNITS.CELSIUS,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: -50,
      max: 100,
    },
    {
      name: 'Last drive average outside temperature',
      external_id: `${externalId}:last_drive_average_outside_temperature`,
      selector: `${externalId}-last-drive-average-outside-temperature`,
      category: DEVICE_FEATURE_CATEGORIES.ELECTRICAL_VEHICLE_CLIMATE,
      type: DEVICE_FEATURE_TYPES.ELECTRICAL_VEHICLE_CLIMATE.OUTSIDE_TEMPERATURE,
      unit: DEVICE_FEATURE_UNITS.CELSIUS,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: -50,
      max: 100,
    },
    {
      name: 'Last drive starting battery',
      external_id: `${externalId}:last_drive_starting_battery`,
      selector: `${externalId}-last-drive-starting-battery`,
      category: DEVICE_FEATURE_CATEGORIES.ELECTRICAL_VEHICLE_BATTERY,
      type: DEVICE_FEATURE_TYPES.ELECTRICAL_VEHICLE_BATTERY.BATTERY_LEVEL,
      unit: DEVICE_FEATURE_UNITS.PERCENT,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 100,
    },
    {
      name: 'Last drive ending battery',
      external_id: `${externalId}:last_drive_ending_battery`,
      selector: `${externalId}-last-drive-ending-battery`,
      category: DEVICE_FEATURE_CATEGORIES.ELECTRICAL_VEHICLE_BATTERY,
      type: DEVICE_FEATURE_TYPES.ELECTRICAL_VEHICLE_BATTERY.BATTERY_LEVEL,
      unit: DEVICE_FEATURE_UNITS.PERCENT,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 100,
    },
  ];
}

module.exports = {
  buildFeatureDrive,
};
