const {
  DEVICE_FEATURE_CATEGORIES,
  DEVICE_FEATURE_TYPES,
  DEVICE_FEATURE_UNITS,
} = require('../../../../utils/constants');

/**
 * @description Transforms Tessie feature as Gladys feature.
 * @param {string} externalId - Gladys external ID.
 * @param {string} category - Gladys category.
 * @param {object} chargeState - Charge state from Tessie.
 * @returns {object} Gladys feature or undefined.
 * @example
 * buildFeatureCharge('tessie:vehicle_vin', 'ELECTRICAL_VEHICLE_CHARGE', chargeState);
 */
function buildFeatureCharge(externalId, category, chargeState) {
  return [
    {
      name: 'Charge current',
      external_id: `${externalId}:charge_current`,
      selector: `${externalId}-charge-current`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_CURRENT,
      unit: DEVICE_FEATURE_UNITS.AMPERE,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 100,
      last_value: chargeState.charger_actual_current,
    },
    {
      name: 'Charge energy added total',
      external_id: `${externalId}:charge_energy_added_total`,
      selector: `${externalId}-charge-energy-added-total`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_ENERGY_ADDED_TOTAL,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 999999999,
    },
    {
      name: 'Charge energy consumption total',
      external_id: `${externalId}:charge_energy_consumption_total`,
      selector: `${externalId}-charge-energy-consumption-total`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_ENERGY_CONSUMPTION_TOTAL,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 999999999,
      last_value: chargeState.lifetime_energy_used,
    },
    {
      name: 'Charge on',
      external_id: `${externalId}:charge_on`,
      selector: `${externalId}-charge-on`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_ON,
      read_only: false,
      keep_history: true,
      has_feedback: true,
      min: 0,
      max: 1,
      last_value: chargeState.charging_state === 'Charging' ? 1 : 0,
    },
    {
      name: 'Charge power',
      external_id: `${externalId}:charge_power`,
      selector: `${externalId}-charge-power`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_POWER,
      unit: DEVICE_FEATURE_UNITS.KILOWATT,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 1000000,
      last_value: chargeState.charger_power,
    },
    {
      name: 'Charge voltage',
      external_id: `${externalId}:charge_voltage`,
      selector: `${externalId}-charge-voltage`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].CHARGE_VOLTAGE,
      unit: DEVICE_FEATURE_UNITS.VOLT,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 1000,
      last_value: chargeState.charger_voltage,
    },
    {
      name: 'Last charge energy added',
      external_id: `${externalId}:last_charge_energy_added`,
      selector: `${externalId}-last-charge-energy-added`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].LAST_CHARGE_ENERGY_ADDED,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 999999999,
    },
    {
      name: 'Last charge energy consumption',
      external_id: `${externalId}:last_charge_energy_consumption`,
      selector: `${externalId}-last-charge-energy-consumption`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].LAST_CHARGE_ENERGY_CONSUMPTION,
      unit: DEVICE_FEATURE_UNITS.KILOWATT_HOUR,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 999999999,
    },
    {
      name: 'Plugged',
      external_id: `${externalId}:plugged`,
      selector: `${externalId}-plugged`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].PLUGGED,
      read_only: true,
      has_feedback: false,
      keep_history: true,
      min: 0,
      max: 1,
      last_value: chargeState.charging_state !== 'Disconnected' ? 1 : 0,
    },
    {
      name: 'Target charge limit',
      external_id: `${externalId}:target_charge_limit`,
      selector: `${externalId}-target-charge-limit`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].TARGET_CHARGE_LIMIT,
      unit: DEVICE_FEATURE_UNITS.PERCENT,
      read_only: false,
      keep_history: true,
      has_feedback: true,
      min: chargeState.charge_limit_soc_min,
      max: chargeState.charge_limit_soc_max,
      last_value: chargeState.charge_limit_soc,
    },
    {
      name: 'Target current',
      external_id: `${externalId}:target_current`,
      selector: `${externalId}-target-current`,
      category: DEVICE_FEATURE_CATEGORIES[category],
      type: DEVICE_FEATURE_TYPES[category].TARGET_CURRENT,
      unit: DEVICE_FEATURE_UNITS.AMPERE,
      read_only: false,
      keep_history: true,
      has_feedback: true,
      min: 0,
      max: chargeState.charge_current_request_max,
      last_value: chargeState.charge_current_request,
    },
  ];
}

module.exports = {
  buildFeatureCharge,
};
